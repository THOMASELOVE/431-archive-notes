# NHANES Data {#sec-nhanes1}

Next, we'll explore some data from the US [National Health and Nutrition Examination Survey](https://www.cdc.gov/nchs/nhanes/index.htm), often referred to as NHANES.

## Setup: Packages Used Here

```{r, message = FALSE}
knitr::opts_chunk$set(comment = NA)

library(NHANES)
library(naniar)
library(kableExtra)
library(tidyverse)

theme_set(theme_bw())
```

## The NHANES data: A First Sample

The `NHANES` package provides a sample of 10,000 NHANES responses from the 2009-10 and 2011-12 administrations, in a tibble also called `NHANES`. We can obtain the dimensions of this tibble with the `dim()` function.

```{r}
NHANES
```

We see that we have `r nrow(NHANES)` rows and `r ncol(NHANES)` columns in the `NHANES` tibble. For more on what makes a particular data frame into a tibble, and why we'd want such a thing, you might be interested in the Tibbles section of @R4DS. Essentially, tibbles are data frames that are easier and more predictable to work with.

## Sampling NHANES Adults {#newNHANES} 

Suppose we want to take this NHANES tibble, and use it to generate a sample describing 750 unique (distinct) adult subjects who completed the 2011-12 version of the survey when they were between the ages of 21 and 64.

### Creating a Temporary, Cleaner Tibble

I'll start by describing the plan we will use to create a new tibble called `nh_temp` from which we will eventually build our final sample. In particular, let me lay out the steps I will use to create the `nh_temp` frame from the original `NHANES` tibble available in the R package called `NHANES`.

1. We'll **filter** the original NHANES tibble to include only the responses from the 2011-12 administration of the survey. This will cut the sample in half, from 10,000 rows to 5,000.

2. We'll then **filter** again to restrict the sample to adults whose age is at least 21 and also less than 65. I'll do this because I want to avoid problems with including both children and adults in my sample, and because I also want to focus on the population of people in the US who are usually covered by private insurance from their job, or by Medicaid insurance from the government, rather than those covered by Medicare.

3. What is listed in the NHANES tibble as `Gender` should be more correctly referred to as `Sex`. `Sex` is a biological feature of an individual, while `Gender` is a social construct. This is an important distinction, so I'll change the name of the variable.

4. We'll also rename three other variables, specifically we'll use `Race` to describe the `Race3` variable in the original NHANES tibble, as well as `SBP` to refer to the average systolic blood pressure, which is specified as `BPSysAve`, and `DBP` to refer to the average diastolic blood pressure, which is specified as `BPDiaAve`.

5. Having accomplished the previous four steps, we'll then *select* the variables we want to keep in the sample. (We use *select* for choosing variables or columns in the tibble, and *filter* for selecting subjects or rows.) The sixteen variables we will select are: ID, Sex, Age, Height, Weight, Race, Education, BMI, SBP, DBP, Pulse, PhysActive, Smoke100, SleepTrouble, MaritalStatus and HealthGen.

6. The original NHANES tibble includes some subjects (rows) multiple times in an effort to incorporate some of the sampling weights used in most NHANES analyses. For our purposes, though, we'd like to only include each subject one time. We use the `distinct()` function to limit the tibble to completely unique subjects (so that, for example, we don't wind up with two or more rows that have the same ID number.)

Here is the code I used to complete the six steps listed above and create the `nh_temp` tibble.

```{r build_nh_temp}
nh_temp <- NHANES |>
    filter(SurveyYr == "2011_12") |>
    filter(Age >= 21 & Age < 65) |>
    rename(Sex = Gender, Race = Race3, SBP = BPSysAve, DBP = BPDiaAve) |>
    select(ID, Sex, Age, Height, Weight, Race, Education, BMI, SBP, DBP, 
           Pulse, PhysActive, Smoke100, SleepTrouble, 
           MaritalStatus, HealthGen) |>
   distinct()
```

The resulting `nh_temp` tibble has `r nrow(nh_temp)` rows and `r ncol(nh_temp)` columns.

```{r}
nh_temp
```

### Sampling `nh_temp` to obtain our `nh_adult750` sample {#sec-nh750}

Having established the `nh_temp` tibble, we now select a random sample of 750 adults from the `r nrow(nh_temp)` available responses. 

- We will use the `set.seed()` function in R to set a random numerical seed to ensure that if you redo this work, you will obtain the same sample.
    - Setting a seed is an important part of being able to replicate the work later when sampling is involved. If you and I use the same seed, we should get the same sample.
- Then we will use the `slice_sample()` function to actually draw the random sample, without replacement.
    - "Without replacement" means that once we've selected a particular subject, we won't select them again.

```{r}
set.seed(431002) 
# use set.seed to ensure that we all get the same random sample 

nh_adult750 <- slice_sample(nh_temp, n = 750, replace = F) 

nh_adult750
```

The `nh_adult750` tibble now includes `r nrow(nh_adult750)` rows (observations) on `r ncol(nh_adult750)` variables (columns). Essentially, we have `r ncol(nh_adult750)` pieces of information on each of `r nrow(nh_adult750)` adult NHANES subjects who were included in the 2011-12 panel.

### Summarizing the Data's Structure

We can identify the number of rows and columns in a data frame or tibble with the `dim` function.

```{r}
dim(nh_adult750)
```


The `str` function provides a lot of information about the structure of a data frame or tibble.

```{r}
str(nh_adult750)
```

To see the first few observations, use `head`, and to see the last few, try `tail`...

```{r}
tail(nh_adult750, 5) # shows the last five observations in the data set
```

### What are the variables?

We can use the `glimpse` function to get a short preview of the data.

```{r}
glimpse(nh_adult750)
```

The variables we have collected are described in the brief table below^[Descriptions are adapted from the ?NHANES help file. Remember that what NHANES lists as Gender is captured here as Sex, and similarly Race3, BPSysAve and BPDiaAve from NHANES are here listed as Race, SBP and DBP.].

Variable | Description | Sample Values
----------:  | ------------------------------------------ | -------------
ID           | a numerical code identifying the subject   | 68648, 67200
Sex          | sex of subject (2 levels)                  | female, male
Age          | age (years) at screening of subject        | 30, 35
Height       | height (in cm) at screening of subject     | 181.3, 180.2
Weight       | weight (in kg) at screening of subject     | 67.1, 86.6
Race         | reported race of subject (6 levels)        | White, Black
Education    | educational level of subject (5 levels)    | College Grad, High School
BMI          | body-mass index, in kg/m^2^                | 20.4, 26.7
SBP          | systolic blood pressure in mm Hg           | 103, 113
DBP          | diastolic blood pressure in mm Hg          | 59, 68
Pulse        | 60 second pulse rate in beats per minute   | 78, 70
PhysActive   | Moderate or vigorous-intensity sports?     | Yes, No
Smoke100     | Smoked at least 100 cigarettes lifetime?   | Yes, No
SleepTrouble | Told a doctor they have trouble sleeping?  | Yes, No
MaritalStatus | Marital Status    | Married, Divorced
HealthGen    | Self-report general health rating (5 levels) | Vgood, Fair

The levels for the multi-categorical variables are:

- **Race**: Mexican, Hispanic, White, Black, Asian, or Other.
- **Education**: 8th Grade, 9 - 11th Grade, High School, Some College, or College Grad.
- **MaritalStatus**: Married, Widowed, Divorced, Separated, NeverMarried or LivePartner (living with partner).
- **HealthGen**: Excellent, Vgood, Good, Fair or Poor.

Some details can be obtained using the `summary` function, or any of the other approaches we saw used with the `penguins` data earlier.

```{r}
summary(nh_adult750)
```

Note the appearance of `NA's` (indicating missing values) in some columns, and that some variables are summarized by a list of their (categorical) values (with counts) and some (quantitative/numeric) variables are summarized with a minimum, quartiles and means.

## Counting Missing Values

The `summary()` command counts the number of missing observations in each variable, but sometimes you want considerably more information.

We can use some functions from the `naniar` package to learn useful things about the missing data in our `nh_adult750` sample. (Recall that we could also use the `vis_miss()` function from the `visdat` package, as we saw earlier with the `penguins` to get some of this information, but the `naniar` approach provides more exploratory tools.)

The `miss_var_table` command provides a table of the number of variables with 0, 1, 2, up to n, missing values and the percentage of the total number of variables those variables make up.

```{r}
miss_var_table(nh_adult750)
```

So, for instance, we have `r miss_var_table(nh_temp) |> filter(n_miss_in_var == 0) |> select(n_vars)` variables with no missing data, and that constitutes `r miss_var_table(nh_temp) |> filter(n_miss_in_var == 0) |> select(pct_vars)`% of the 16 variables in our `nh_adult750` data.

The `miss_var_summary()` function tabulates the number, percent missing, and cumulative sum of missing of each variable in our tibble, in order of most to least missing values.

```{r}
miss_var_summary(nh_adult750) |>
  kbl() |>
  kable_styling(full_width = FALSE, position = "center")
```

So, for example, the `r miss_var_summary(nh_temp) |> slice_head(n = 1) |> select(variable)` variable is the one missing more of our data than anything else within the `nh_adult750` tibble.

A graph of this information is available, as well.

```{r}
#| warning: FALSE
gg_miss_var(nh_adult750)
```

I'll note that there are also functions to count the number of missing observations by case (observation) rather than variable. For example, we can use `miss_case_table`.

```{r}
miss_case_table(nh_adult750)
```

Now we see that `r miss_case_table(nh_adult750) |> filter(n_miss_in_case == 0) |> select(n_cases)` observations, or `r miss_case_table(nh_adult750) |> filter(n_miss_in_case == 0) |> select(pct_cases)`% of all cases have no missing data.

We can use `miss_case_summary()` to identify cases with missing data, as well.

```{r}
miss_case_summary(nh_adult750)
```


## Sampling 500 Complete Cases {#sec-nh_cc} 

If we wanted a sample of exactly 750 subjects with complete data, we would have needed to add a step in the development of our `nh_temp` tibble to filter for complete cases.

```{r build_nh_temp2}
nh_temp2 <- NHANES |>
    filter(SurveyYr == "2011_12") |>
    filter(Age >= 21 & Age < 65) |>
    rename(Sex = Gender, Race = Race3, SBP = BPSysAve, DBP = BPDiaAve) |>
    select(ID, Sex, Age, Height, Weight, Race, Education, BMI, SBP, DBP, 
           Pulse, PhysActive, Smoke100, SleepTrouble, 
           MaritalStatus, HealthGen) |>
    distinct() |>
    na.omit()
```

Let's check that this new tibble has no missing data.

```{r}
miss_var_table(nh_temp2)
```

OK. Now, let's create a second sample, called `nh_adult500cc`, where now, we will select 500 adults with complete data on all of the variables of interest, and using a different random seed. The `cc` here stands for complete cases.

```{r}
set.seed(431003) 
# use set.seed to ensure that we all get the same random sample 

nh_adult500cc <- slice_sample(nh_temp2, n = 500, replace = F) 

nh_adult500cc
```

## Saving our Samples in `.Rds` files

We'll save the `nh_adult750` and `nh_adult500cc` samples to use in later parts of the notes. To do this, we'll save them as `.Rds` files, which are files we can read directly into R with the `read_rds` command, and which will have some advantages for us later on.

```{r}
write_rds(nh_adult750, file = "data/nh_adult750.Rds")
write_rds(nh_adult500cc, file = "data/nh_adult500cc.Rds")
```

You will also find these `.Rds` files as part of the [431-data repository](https://github.com/THOMASELOVE/431-data) for the course.

## Coming Up

Next, we'll introduce some new ways of thinking about data and variables as we load, explore and learn about some of the variables in our two NHANES samples.

