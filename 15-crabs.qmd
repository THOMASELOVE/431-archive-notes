# Studying Crab Claws

For our next example, we'll consider a study from zoology, specifically carcinology - the study of crustaceans. My source for these data is Chapter 7 in @RamseySchafer which drew the data from a figure in @Yamada1998.  

## Setup: Packages Used Here

```{r}
#| message = FALSE

knitr::opts_chunk$set(comment = NA)

library(janitor)
library(broom)
library(knitr)
library(tidyverse)

theme_set(theme_bw())
```

We will also use the `describe` function from the `psych` package.

## The Data

The available data are the mean closing forces (in Newtons) and the propodus heights (mm) of the claws on 38 crabs that came from three different species. The *propodus* is the segment of the crab's clawed leg with an immovable finger and palm. 

![](figures/crabanat.jpg)

This was part of a study of the effects that predatory intertidal crab species have on populations of snails. The three crab species under study are:

- 14 Hemigraspus nudus, also called the [purple shore crab](https://en.wikipedia.org/wiki/Purple_shore_crab) (14 crabs)
- 12 Lophopanopeus bellus, also called the [black-clawed pebble crab](https://inverts.wallawalla.edu/Arthropoda/Crustacea/Malacostraca/Eumalacostraca/Eucarida/Decapoda/Brachyura/Family_Xanthidae/Lophopanopeus_bellus_bellus.html), and
- 12 Cancer productus, one of several species of [red rock crabs](https://en.wikipedia.org/wiki/Cancer_productus) (12)

```{r}
crabs <- read_csv("data/crabs.csv", show_col_types = FALSE) 

crabs
```

The `species` information is stored here as a character variable. How many different crabs are we talking about in each `species`?

```{r}
crabs |> tabyl(species)
```

As it turns out, we're going to want to treat the `species` information as a **factor** with three levels, rather than as a character variable.

```{r}
crabs <- crabs |>
    mutate(species = factor(species))
```


Here's a quick summary of the data. Take care to note the useless results for the first two variables. At least the function flags with a `*` those variables it thinks are non-numeric.

```{r}
psych::describe(crabs)
```

Actually, we're more interested in these results after grouping by species.

```{r}
crabs |>
    group_by(species) |>
    summarise(n = n(), median(force), median(height))
```

## Association of Size and Force

Suppose we want to describe force on the basis of height, across all 38 crabs. We'll add titles and identify the three species of crab, using shape and color.

```{r}
ggplot(crabs, aes(x = height, y = force, color = species, shape = species)) +
    geom_point(size = 3) +
    labs(title = "Crab Claw Force by Size", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)")
```

A faceted plot for each species really highlights the difference in force between the *Hemigraspus nudus* and the other two species of crab.

```{r}
ggplot(crabs, aes(x = height, y = force, color = species)) +
    geom_point(size = 3) +
    facet_wrap(~ species) +
    guides(color = "none") +
    labs(title = "Crab Claw Force by Size", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)")
```

## The `loess` smooth{#loess_smooth}

We can obtain a smoothed curve (using several different approaches) to summarize the pattern presented by the data in any scatterplot. For instance, we might build such a plot for the complete set of 38 crabs, adding in a non-linear smooth function (called a loess smooth.)

```{r}
ggplot(crabs, aes(x = height, y = force)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE, formula = y ~ x) +
    labs(title = "Crab Claw Force by Size", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)")
```

As we have discussed previously, a **loess smooth** fits a curve to data by tracking (at point x) the points within a neighborhood of point x, with more emphasis given to points near x. It can be adjusted by tweaking the `span` and `degree` parameters. 

In addition to the curve, smoothing procedures can also provide confidence intervals around their main fitted line. Consider the following plot of the `crabs` information, which adjusts the span (from its default of 0.75) and also adds in the confidence intervals.

```{r}
ggplot(crabs, aes(x = height, y = force)) +
    geom_point() +
    geom_smooth(method = "loess", formula = y ~ x, span = 0.5, se = TRUE) +
    labs(title = "Crab Claw Force by Size", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)")
```

By reducing the size of the span, our resulting picture shows a much less smooth function that we generated previously. 

### Smoothing within Species

We can, of course, produce the plot above with separate smooths for each of the three species of crab.

```{r}
ggplot(crabs, aes(x = height, y = force, group = species, color = species)) +
    geom_point(size = 3) +
    geom_smooth(method = "loess", formula = y ~ x, se = FALSE) +
    labs(title = "Crab Claw Force by Size", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)")
```

If we want to add in the confidence intervals (here I'll show them at 90% rather than the default of 95%) then this plot should be faceted. Note that by default, what is displayed when `se = TRUE` are 95% prediction intervals - the `level` function in `stat_smooth` [which can be used in place of `geom_smooth`] is used here to change the coverage percentage from 95% to 90%.

```{r}
ggplot(crabs, aes(x = height, y = force, group = species, color = species)) +
    geom_point() +
    stat_smooth(method = "loess", formula = y ~ x, level = 0.90, se = TRUE) +
    guides(color = "none") +
    labs(title = "Crab Claw Force by Size", 
         caption = "with loess smooths and 90% confidence intervals",
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)") +
    facet_wrap(~ species)
```

More on these and other confidence intervals later, especially in part B.

## Fitting a Linear Regression Model

Suppose we plan to use a simple (least squares) linear regression model to describe force as a function of height. Is a least squares model likely to be an effective choice here?

The plot below shows the regression line predicting closing force as a function of propodus height. Here we annotate the plot to show the actual fitted regression line, which required fitting it with the `lm` statement prior to developing the graph.

```{r}
mod <- lm(force ~ height, data = crabs)

ggplot(crabs, aes(x = height, y = force)) +
    geom_point() +
    geom_smooth(method = "lm", formula = y ~ x,  color = "red") +
    labs(title = "Crab Claw Force by Size with Linear Regression Model", 
         x = "Claw's propodus height (mm)", y = "Mean closing force (N)") +
    annotate("text", x = 11, y = 0, color = "red", fontface = "italic",
             label = paste( "Force = ", round_half_up(coef(mod)[1],3), " + ", 
                            round_half_up(coef(mod)[2],3), " Height" ))
```

The **lm** function, again, specifies the linear model we fit to predict force using height. Here's the summary.

```{r}
summary(lm(force ~ height, data = crabs))
```

Again, the key things to realize are:
    
- The outcome variable in this model is **force**, and the predictor variable is **height**.
- The straight line model for these data fitted by least squares is force = `r round_half_up(coef(lm(crabs$force ~ crabs$height))[1],3)` + `r round_half_up(coef(lm(crabs$force ~ crabs$height))[2],3)` height.
- The slope of height is positive, which indicates that as height increases, we expect that force will also increase. Specifically, we expect that for every additional mm of height, the force will increase by `r round_half_up(coef(lm(crabs$force ~ crabs$height))[2],3)` Newtons.
- The multiple R-squared (squared correlation coefficient) is `r round_half_up(summary(lm(crabs$force ~ crabs$height))$r.squared,3)`, which implies that `r 100*round_half_up(summary(lm(crabs$force ~ crabs$height))$r.squared,3)`% of the variation in force is explained using this linear model with height. It also implies that the Pearson correlation between force and height is the square root of `r round_half_up(summary(lm(crabs$force ~ crabs$height))$r.squared,3)`, or `r round(cor(crabs$force, crabs$height),3)`.

## Is a Linear Model Appropriate?

The zoology (at least as described in @RamseySchafer) suggests that the actual nature of the relationship would be represented by a log-log relationship, where the log of force is predicted by the log of height. 

This log-log model is an appropriate model when we think that percentage increases in X (height, here) lead to constant percentage increases in Y (here, force). 

To see the log-log model in action, we plot the log of force against the log of height. We could use either base 10 (log10 in R) or natural (log in R) logarithms.

```{r}
ggplot(crabs, aes(x = log(height), y = log(force))) +
    geom_point() +
    geom_smooth(method = "lm", formula = y ~ x) + 
    labs(title = "Log-Log Model for Crabs data")
```

The correlations between the raw force and height and between their logarithms turn out to be quite similar, and because the log transformation is monotone in these data, there's actually no change at all in the Spearman correlations.

Correlation of             | Pearson r | Spearman r
:--------------:           | :--------: | :---------:
force and height           | `r round(cor(crabs$force, crabs$height),3)` | `r round(cor(crabs$force, crabs$height, method = "spearman"),3)`
log(force) and log(height) | `r round(cor(log(crabs$force), log(crabs$height)),3)` | `r round(cor(log(crabs$force), log(crabs$height), method = "spearman"),3)`

### The log-log model

```{r}
crab_loglog <- lm(log(force) ~ log(height), data = crabs)

summary(crab_loglog)
```

Our regression equation is log(force) = `r round_half_up(coef(crab_loglog)[1],3)` + `r round_half_up(coef(crab_loglog)[2],3)` log(height).

So, for example, if we found a crab with propodus height = 10 mm, our prediction for that crab's claw force (in Newtons) based on this log-log model would be...

- log(force) = `r round_half_up(coef(crab_loglog)[1],3)` + `r round_half_up(coef(crab_loglog)[2],3)` log(10)
- log(force) = `r round_half_up(coef(crab_loglog)[1],3)` + `r round_half_up(coef(crab_loglog)[2],3)` x `r log(10)`
- log(force) = `r coef(crab_loglog)[1] + coef(crab_loglog)[2] * log(10)`
- and so predicted force = exp(`r coef(crab_loglog)[1] + coef(crab_loglog)[2] * log(10)`) = `r exp(coef(crab_loglog)[1] + coef(crab_loglog)[2] * log(10))` Newtons, which, naturally, we would round to `r round_half_up(exp(coef(crab_loglog)[1] + coef(crab_loglog)[2] * log(10)),3)` Newtons to match the data set's level of precision.

### How does this compare to our original linear model?

```{r}
crab_linear <- lm(force ~ height, data = crabs)

summary(crab_linear)
```

The linear regression equation is force = `r round_half_up(coef(crab_linear)[1], 3)` + `r round_half_up(coef(crab_linear)[2], 3)` height.

So, for example, if we found a crab with propodus height = 10 mm, our prediction for that crab's claw force (in Newtons) based on this linear model would be...

- force = `r coef(crab_linear)[1]` + `r coef(crab_linear)[2]` x 10
- force = `r coef(crab_linear)[1]` + `r 10*coef(crab_linear)[2]`
- so predicted force = `r coef(crab_linear)[1] + 10*coef(crab_linear)[2]`, which we would round to `r round_half_up(coef(crab_linear)[1] + 10*coef(crab_linear)[2],3)` Newtons.

So, it looks like the two models give meaningfully different predictions.

## Making Predictions with a Model

The `broom` package's `augment` function provides us with a consistent method for obtaining predictions (also called fitted values) for a new crab or for our original data. Suppose we want to predict the `force` level for two new crabs: one with height = 10 mm, and another with height = 12 mm.

```{r}
newcrab <- tibble(crab = c("Crab_A", "Crab_B"), height = c(10, 12))

augment(crab_linear, newdata = newcrab)
```

Should we want to obtain a prediction interval, we can use the `predict` function:

```{r}
predict(crab_linear, newdata = newcrab, interval = "prediction", level = 0.95)
```

We'd interpret this result as saying that the linear model's predicted force associated with a single new crab claw with propodus height 10 mm is 15.3 Newtons, and that a 95% prediction interval for the true value of such a force for such a claw is between 1.0 and 29.5 Newtons. More on prediction intervals later.

### Predictions After a Transformation

We can also get predictions from the log-log model. The default choice is a 95% prediction interval.

```{r}
predict(crab_loglog, newdata = newcrab, interval = "prediction")
```

Of course, these predictions describe the `log(force)` for such a crab claw. To get the prediction in terms of simple force, we'd need to back out of the logarithm, by exponentiating our point estimate and the prediction interval endpoints.

```{r}
exp(predict(crab_loglog, newdata = newcrab, interval = "prediction"))
```

We'd interpret this result as saying, for the first new crab, that the log-log model's predicted force associated with a single new crab claw with propodus height 10 mm is 12.4 Newtons, and that a 95% prediction interval for the true value of such a force for such a claw is between 3.1 and 50.0 Newtons. 

### Comparing Model Predictions

Suppose we wish to build a plot of force vs height with a straight line for the linear model's predictions, and a new curve for the log-log model's predictions, so that we can compare and contrast the implications of the two models on a common scale. The `predict` function, when not given a new data frame, will use the existing predictor values that are in our `crabs` data. Such predictions are often called fitted values. 

To put the two sets of predictions on the same scale despite the differing outcomes in the two models, we'll exponentiate the results of the log-log model, and build a little data frame containing the heights and the predicted forces from that model.

```{r}
loglogdat <- tibble(height = crabs$height, force = exp(predict(crab_loglog)))
```

A cleaner way to do this might be to use the `augment` function directly from `broom`:

```{r}
augment(crab_loglog)
```

Now, we're ready to use the `geom_smooth` approach to plot the linear fit, and `geom_line` (which also fits curves) to display the log-log fit.

```{r}
ggplot(crabs, aes(x = height, y = force)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, 
                formula = y ~ x, col="blue", linetype = 2) +
    geom_line(data = loglogdat, col = "red", linetype = 2, size = 1) +
    annotate("text", 7, 12, label = "Linear Model", col = "blue") +
    annotate("text", 10, 8, label = "Log-Log Model", col = "red") +
    labs(title = "Comparing the Linear and Log-Log Models for Crab Claw data")
```

Based on these 38 crabs, we see some modest differences between the predictions of the two models, with the log-log model predicting generally lower closing force for a given propodus height than would be predicted by a linear model.





