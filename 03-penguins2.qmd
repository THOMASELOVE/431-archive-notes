# Summarizing Penguins {#sec-pen2}

We will again use the data contained in the `palmerpenguins` package in this chapter. Here, we present a few of the more appealing ways to obtain numerical and graphical summaries, without much explanation. We'll discuss these issues further in the rest of Part A of these Course Notes.

## Setup: Packages Used Here

Here, we'll add several new packages to allow us to display some additional summaries, and present our tables and plots in different ways.

```{r}
#| message = FALSE
knitr::opts_chunk$set(comment = NA)

library(palmerpenguins) 
library(kableExtra)
library(gtsummary)
library(summarytools)
library(visdat)
library(lvplot)
library(tidyverse) 

theme_set(theme_bw())
```

We will also use functions from the `mosaic` and `Hmisc` packages here, though I won't load them into our session at this time.

## Our Data Set

Let's look again at the `penguins` data contained in the `palmerpenguins` package.

```{r}
penguins
```

## Numerical Summaries for a Tibble

Note that in this work, I sometimes don't explain all of the numerical summaries provided. Some of that discussion is postponed to @sec-summ_quant.

### Using summary()

We have several ways to obtain useful summaries of all variables in the `penguins` data.

```{r}
penguins |>
  summary()
```

### Using inspect() from `mosaic`

Some people like the `inspect()` function from the `mosaic` package.

```{r}
#| message: FALSE
penguins |> 
  mosaic::inspect()
```

Daniel Kaplan's [Statistical Modeling, 2nd edition](https://dtkaplan.github.io/SM2-bookdown/) provides an entire course which coordinates nicely with the tools available in the `mosaic` package. In our course, we'll most often use this `inspect()` tool, and a related tool called `favstats`.

### Using favstats() from mosaic.

The `favstats` function lets us look at some common summaries for a single variable, or for one variable divided into groups by another. We'll also return to this approach in @sec-summ_quant.


```{r}
mosaic::favstats(~ bill_length_mm, data = penguins) |>
  kbl() |>
  kable_styling()
```

```{r}
mosaic::favstats(bill_length_mm ~ species, data = penguins) |>
  kbl() |>
  kable_styling()
```

### Using describe() from `psych`

We can use the `describe()` function from the `psych` package to get some additional summaries, if we're interested, and here we also demonstrate the use of the `kbl()` and `kable_styling()` functions from the `kableExtra` package to make the table look appealing in HTML. More on the use of the `kableExtra` package [is available here](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html). We'll also return to this approach in @sec-summ_quant.

```{r}
penguins |>
  psych::describe() |>
  kbl() |>
  kable_styling()
```

### Using describe() from `Hmisc`

One approach Frank Harrell has developed that I find helpful is the `describe()` function within his `Hmisc` package, which produces these results. We'll also return to this approach in @sec-summ_quant.


```{r}
penguins |> 
  Hmisc::describe() 
```



### Using tbl_summary() from `gtsummary`

If you want to produce results which look like you might expect to see in a published paper, the `tbl_summary()` function from the `gtsummary` package has many nice features.

```{r}
penguins |> 
  tbl_summary()
```

A vignette explaining the use of the `gtsummary` package [is available here](https://www.danieldsjoberg.com/gtsummary/). We'll also return to this approach in @sec-summ_quant.


#### Using descr from `summarytools`

The `descr()` function from the `summarytools` package can also be used to provide numerical descriptions of all of the numerical variables contained within a tibble.

```{r}
penguins |> 
  descr(stats = "common" )
```


An introduction to the summarytools package [is available here](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html), and illustrates some other ways to modify this output to suit your needs. We'll also return to this approach in @sec-summ_quant.

### dfSummary() from `summarytools`

The `dfSummary()` function from the `summarytools` package can be used to provide some additional descriptions of all variables within a tibble. You'll find more information about these numerical descriptions in @sec-summ_quant.

```{r}
#| message: FALSE
dfSummary(penguins, 
          plain.ascii  = FALSE, 
          style        = "grid", 
          graph.magnif = 0.75, 
          valid.col    = FALSE)
```

### Visualizing with `visdat` functions

The `vis_dat()` function from the `visdat` package shows something about the types of variables, providing visual clues about what's inside. The picture below identifies variables types, and missing values.

```{r}
#| warning = FALSE
vis_dat(penguins)
```

We can explore the missing data further using the `vis_miss` function.

```{r}
vis_miss(penguins)
```

A vignette explaining the use of the `visdat` package [is available here](https://cran.r-project.org/web/packages/visdat/vignettes/using_visdat.html).

## Histograms for a Variable

The most common tool we use in producing a graphical summary of a variable, like the penguin's flipper length, is a histogram. Here's one option.

```{r}
ggplot(data = penguins, aes(x = flipper_length_mm)) +
  geom_histogram()
```

This approach produces two messages that alert us to potential concerns, and a fairly unattractive plot.

This time, we'll first exclude the two penguins without a measured flipper length, and then set the `binwidth` to be 10. How well does that work?

```{r}
penguins2 <- 
  penguins |>
  filter(complete.cases(flipper_length_mm))

ggplot(data = penguins2, aes(x = flipper_length_mm)) +
  geom_histogram(binwidth = 10)
```

Now we've eliminated the messages, but it would be nice to have some more granularity in the bars (so we'd like a smaller binwidth) and I'd also like to make the bars more clearly separated with colors. I'd also like to add a title. Like this:

```{r}
ggplot(data = penguins2, aes(x = flipper_length_mm)) +
  geom_histogram(binwidth = 5, fill = "orange", col = "navy") +
  labs(title = "Distribution of Flipper Length in 342 Palmer Penguins")
```

There are some other options for creating a graphical summary of a variable's distribution. For example, we might consider a density plot, as well as a rug plot along the horizontal (X) axis:

```{r}
ggplot(data = penguins2, aes(x = flipper_length_mm)) +
  geom_density(col = "navy") +
  geom_rug(col = "red") +
  labs(title = "Density and Rug Plot of Flipper Length in 342 Palmer Penguins")
```

Or perhaps a dotplot would provide a useful look...

```{r}
ggplot(data = penguins2, aes(x = flipper_length_mm)) +
  geom_dotplot(binwidth = 1, fill = "orange", col = "navy") +
  labs(title = "Dot Plot of Flipper Length in 342 Palmer Penguins")
```

We'll learn about several other approaches to summarizing the distribution of a variable graphically later in the course.

## Comparing Penguins by Species Numerically

We have data from three different species of penguin. Can we compare their flipper lengths numerically, perhaps by calculating the mean flipper length within each species?

```{r}
penguins |>
  group_by(species) |>
  summarise(mean(flipper_length_mm))
```

Well, that's a problem. Looks like we have some missing values. Can we fix that, and also provide some additional summaries, like the sample size (*n*) and the median and standard deviation within each species? While we're at it, can we make it prettier, with `kbl()` and `kable_styling()`?

```{r}
penguins |>
  filter(complete.cases(species, flipper_length_mm)) |>
  group_by(species) |>
  summarise(n = n(), 
            mean = mean(flipper_length_mm), 
            sd = sd(flipper_length_mm), 
            median = median(flipper_length_mm)) |>
  kbl() |>
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```


## Using favstats() from the mosaic package

As we noted previously, we can also use `favstats()` from the `mosaic` package to help us look at the results for a single variable, split into groups by another, like this:

```{r}
mosaic::favstats(bill_length_mm ~ species, data = penguins) |>
  kbl() |>
  kable_styling()
```

One advantage of this approach is that (as you'll note) it handles the missing data in the way we'd probably expect, by restricting the summaries to the complete cases.

## Using tbl_summary() to summarize the tibble

The `tbl_summary()` function from the `gtsummary` package can also do the job of summarizing all of the other variables in the tibble, broken down by species, very nicely.

```{r}
penguins |> 
  tbl_summary(by = species)
```

## Comparing Penguins by Species Graphically

### Faceting Histograms with facet_wrap()

We could compare the distributions of the flipper lengths across the three species, by creating a set of faceted histograms, like so...

```{r}
penguins3 <- 
  penguins |>
  filter(complete.cases(flipper_length_mm, species))

ggplot(data = penguins3, aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(binwidth = 5, col = "white") +
  facet_wrap(~ species) +
  labs(title = "Distribution of Flipper Length in Palmer Penguins, by Species")
```

We might add in the command

```
  guides(fill = "none") +
```

to eliminate the redundant legend on the right-hand side of the plot.

### Using facet_grid() instead

The `facet_wrap()` approach has created three histograms, spread horizontally. Alternatively, we could plot the species vertically using `facet_grid()`, which clearly shows which species produces the penguins with the larger flipper lengths, especially if we reduce the width of the bins a bit.

```{r}
ggplot(data = penguins3, aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(binwidth = 2, col = "white") +
  facet_grid(species ~ .) +
  guides(fill = "none") +
  labs(title = "Distribution of Flipper Length in Palmer Penguins, by Species")
```

We'll use facets like this all the time in what follows.

### Boxplots

Another very common tool we'll use for looking simultaneously at the distributions of a variable across two or more categories is a boxplot. More on this later, but here's one example of what this might look like.

```{r}
ggplot(data = penguins3, aes(x = flipper_length_mm, y = species, 
                             fill = species)) +
  geom_boxplot() +
  guides(fill = "none") +
  labs(title = "Distribution of Flipper Length in Palmer Penguins, by Species")
```

### Adding Violins

And here's a somewhat fancier version, including a violin plot, and with the coordinates flipped so the plots are shown vertically rather than horizontally.

```{r}
ggplot(data = penguins3, aes(x = flipper_length_mm, y = species)) +
  geom_violin(aes(col = species)) +
  geom_boxplot(aes(fill = species), width = 0.3) +
  guides(col = "none", fill = "none") +
  coord_flip() +
  labs(title = "Augmented Boxplot of Flipper Length in Penguins by Species")
```


### Letter-Value Plots (Boxplots for Large Data)

We might also consider a letter-value plot, using the `geom_lv()` function from the `lvplot` package in R, although I rarely use such a plot unless I have at least 1000 observations to work with.

```{r}
ggplot(data = penguins3, aes(x = species, y = flipper_length_mm)) +
  geom_lv(aes(fill=..LV..)) + scale_fill_brewer() +
  labs(title = "Letter-Value Plot of Flipper Length in Penguins by Species")
```

## Coming Up

You're probably tiring of the penguins now. Next, we'll look at some data on people, taken from the National Health and Nutrition Examination Survey, or NHANES.